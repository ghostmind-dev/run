import { $, which, sleep, cd, fs } from 'zx';
import {
  detectScriptsDirectory,
  verifyIfMetaJsonExists,
} from '../utils/divers.mjs';

////////////////////////////////////////////////////////////////////////////////
// MUTE BY DEFAULT
////////////////////////////////////////////////////////////////////////////////

$.verbose = false;

////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
////////////////////////////////////////////////////////////////////////////////

const GCP_PROJECT_NAME = process.env.GCP_PROJECT_NAME;
const GCP_SERVICE_ACCOUNT_ADMIN = process.env.GCP_SERVICE_ACCOUNT_ADMIN;
const VAULT_ROOT_TOKEN = process.env.VAULT_ROOT_TOKEN;
const VAULT_ADDR = process.env.VAULT_ADDR;
const GCP_PROJECT_ID = process.env.GCP_PROJECT_ID;
const GH_TOKEN = process.env.GITHUB_TOKEN;

////////////////////////////////////////////////////////////////////////////////
// ACTION DEFAULT CONFIG
////////////////////////////////////////////////////////////////////////////////

const actionConfigDefault = {};

////////////////////////////////////////////////////////////////////////////////
// ACT DEFAULT CONFIG
////////////////////////////////////////////////////////////////////////////////'

const coreSecrets = {
  GCP_PROJECT_ID,
  GCP_PROJECT_NAME,
  GCP_SERVICE_ACCOUNT_ADMIN,
  VAULT_ROOT_TOKEN,
  VAULT_ADDR,
  GH_TOKEN,
};

////////////////////////////////////////////////////////////////////////////////
// RUNNING COMMAND LOCATION
////////////////////////////////////////////////////////////////////////////////

let currentPath = await detectScriptsDirectory(process.cwd());

cd(currentPath);

////////////////////////////////////////////////////////////////////////////////
// CURRENT METADATA
////////////////////////////////////////////////////////////////////////////////

let metaConfig = await verifyIfMetaJsonExists(currentPath);

////////////////////////////////////////////////////////////////////////////////
// VERIFY IF IT IS A PROJECT DIRECTORY
////////////////////////////////////////////////////////////////////////////////

export async function verifyProjectDirectory() {
  const metaConfig = await fs.readJsonSync(`meta.json`);

  const { type } = metaConfig;
  if (type !== 'project') {
    console.log('type is not project');
    return false;
  }
  return true;
}

////////////////////////////////////////////////////////////////////////////////
// CREATE GITHUB SECRETS
////////////////////////////////////////////////////////////////////////////////

export async function setGithubSecrets() {
  if (await verifyProjectDirectory()) {
    for (let secret in coreSecrets) {
      await fs.appendFileSync(
        '/tmp/.env',
        `${secret}=${coreSecrets[secret]}\n`
      );
    }
    await $`gh secret set --env-file /tmp/.env`;
  }
}

////////////////////////////////////////////////////////////////////////////////
// MAIN ENTRY POINT
////////////////////////////////////////////////////////////////////////////////

export default async function github(program) {
  const github = program.command('github');
  github.description('set github environment');

  const githubSecrets = github.command('secrets');

  githubSecrets.description('manage github secrets');
  const githubSecretsImport = githubSecrets.command('import');
  githubSecretsImport
    .description('set githubu secrets')
    .action(setGithubSecrets);
}
