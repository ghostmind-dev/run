import { $ } from "npm:zx";
import { config } from "npm:dotenv";
import _ from "npm:lodash";
import { Command, Option } from "npm:commander";
import { resolve } from "https://deno.land/std@0.221.0/path/mod.ts";

////////////////////////////////////////////////////////////////////////////////
// SRC
////////////////////////////////////////////////////////////////////////////////

const SRC = Deno.env.get("SRC");

////////////////////////////////////////////////////////////////////////////////
// CONST
////////////////////////////////////////////////////////////////////////////////

const currentPath = Deno.cwd();

////////////////////////////////////////////////////////////////////////////////
// STARTING PROGRAM
////////////////////////////////////////////////////////////////////////////////

$.verbose = false;

const program = new Command();

////////////////////////////////////////////////////////////////////////////////
// COMMAND
////////////////////////////////////////////////////////////////////////////////

import commandTunnel from "../lib/tunnel.ts";
import commandCustom from "../lib/custom.ts";

////////////////////////////////////////////////////////////////////////////////
// DOTENV
////////////////////////////////////////////////////////////////////////////////

config({ path: `${currentPath}/.env.local` });

program
  .option("--envname <env context>", "name of the env to load")
  .on("option:envname", function (envname) {
    config({ path: `${currentPath}/${envname}`, override: true });
  })
  .option("--envpath <filename>", "path to envfile to load")
  .on("option:envpath", function (filepath) {
    console.log(resolve(currentPath, filepath));
    config({ path: resolve(currentPath, filepath), override: true });
  });

////////////////////////////////////////////////////////////////////////////////
// MAIN ENTRY POINT
////////////////////////////////////////////////////////////////////////////////

program.exitOverride();

program.name("run");

////////////////////////////////////////////////////////////////////////////////
// GIT COMMAND
////////////////////////////////////////////////////////////////////////////////

await commandTunnel(program);
await commandCustom(program);

////////////////////////////////////////////////////////////////////////////////
// PARSING ARGUMENTS
////////////////////////////////////////////////////////////////////////////////

try {
  program.parse();
} catch (err) {
  const { exitCode, name, code, message } = err;

  if (!message.includes("outputHelp")) {
    console.log(message);
    console.error("something went wrong");
  }
}

////////////////////////////////////////////////////////////////////////////////
// THE END
////////////////////////////////////////////////////////////////////////////////
